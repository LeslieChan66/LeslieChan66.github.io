{"meta":{"title":"Leslie's Blog","subtitle":"","description":"","author":"Leslie Chan","url":"http://lesliechan66.github.io","root":"/"},"pages":[{"title":"","date":"2023-05-18T13:38:13.284Z","updated":"2023-05-18T13:38:13.284Z","comments":true,"path":"custom.css","permalink":"http://lesliechan66.github.io/custom.css","excerpt":"","text":":root { --gutter: 25px; --radius: 13px; --color-primary: #1450D0; --color2: #BE41BB; --color3: #FF4D91; --color4: #FF8269; --color5: #FFBF55; --color6: #F9F871; --color7: #9090ff; --color-primary-bg: #1450D026; --color2-bg: #BE41BB26; --color3-bg: #FF4D9126; --color4-bg: #FF826926; --color5-bg: #FFBF5526; --color6-bg: #F9F87126; --color7-bg: #9090ff26; --color-shadow: rgba(161, 177, 204, 0.4); } code { font-family: monospace !important; }"}],"posts":[{"title":"casbin","slug":"casbin","date":"2023-05-25T12:09:05.000Z","updated":"2023-05-25T13:29:31.445Z","comments":true,"path":"casbin.html","link":"","permalink":"http://lesliechan66.github.io/casbin.html","excerpt":"","text":"Casbin 是一个强大和高效的开放源码访问控制库，它支持各种 访问控制模型 以强制全面执行授权。 Casbin支持GO、Java、Nodejs等主流编程语言 PERM模型在 Casbin 中, 访问控制模型被抽象为基于 PERM (Policy, Effect, Request, Matcher) 的一个配置文件，我们可以通过修改模型文件来定制不同的访问控制模型。像ACL, RBAC等模型都是支持的，具体支持的模型可参阅Casbin支持的模型，我们先介绍下PERM模型 Request（请求定义）故名思义这个是用来描述我们的请求的参数，一般来说我们的请求应该会有三个关键元素，分别是访问实体(sub)、访问资源(obj)以及访问方式(act)。举个例子，张三想要查询公司员工的所有信息，那么张三就是访问实体，公司员工的信息就是访问资源，访问方式就是查询。我们可以来看看具体的语法规则： [request_definition] r = sub, obj, act [request_definition]表示这里声明的是请求参数。当然请求定义并不是必须要求是三个参数，比如说基于域的RBAC模型请求定义里就多了域这个参数。 Policy（策略定义）","categories":[],"tags":[]},{"title":"使用Express部署SPA（vue、react）应用（history模式）","slug":"spa","date":"2023-05-18T05:58:33.000Z","updated":"2023-05-18T15:56:56.485Z","comments":true,"path":"spa.html","link":"","permalink":"http://lesliechan66.github.io/spa.html","excerpt":"","text":"浅析SPA应用的路由 SPA（Single Page Application）应用的路由，通常是通过前端框架实现的，比如React、Vue、Angular等。SPA应用只有一个HTML页面，所有的内容都是通过局部刷新实现的，这就需要路由系统来实现视图的切换。 SPA应用的路由，工作流程如下： 定义路由：定义每个URL地址对应的组件或页面。 监听URL变化：通过监听浏览器地址栏的变化，当地址栏发生变化时，获取当前URL地址，根据路由定义，决定显示哪个组件或页面。 动态加载组件：根据路由规则异步加载需要显示的组件或页面，避免首次加载时一次性加载所有组件，导致页面加载缓慢。 更新视图：根据路由规则，显示对应的视图。 SPA应用的路由还可以实现多级嵌套路由、路由守卫、路由参数传递等功能。路由系统是SPA应用的重要组成部分之一，在前端开发中具有重要的作用。 SPA应用的路由模式有以下几种： Hash路由：使用加#号的URL，例如http://example.com/#/homeHash路由不会向服务器发送请求，因此适合在前端实现。 History路由：使用HTML5的history API，例如http://example.com/homeHistory路由会向服务器发送请求，因此需要服务器支持单页面应用。 Abstract路由：使用内存中的路由表，不会改变URL，通常用于无法使用Hash或History路由的环境，比如在Electron或React Native中开发。 我们常见的路由模式就前面两种，这里我们主要介绍在express中部署spa应用。 Express部署spa应用在部署之前首先要搞清楚会遇到的问题，假设我们要将SPA项目部署在&#x2F;example路径下，那么我们可以通过以下代码来实现 // /dist是你spa应用文件夹的相对路径 app.use(&#x27;/example&#x27;, express.static(__dirname + &#x27;/dist/&#x27;)); 然后我们访问http://127.0.0.1:3000/example，看起来一切正常对吧。但是问题来了，比如说当我们前端路由有一个路径为&#x2F;foo&#x2F;bar的页面，我们直接访问http://127.0.0.1:3000/example/foo/bar，不出意外的话404了。因为history模式下我们的请求首先会走到服务端那边处理，但是express并没有匹配到对应的路由规则所以服务端就直接报错404了，所以我们要让服务端那边在收到&#x2F;example开头的请求时，将请求转发到我们spa应用的入口页面即可。根据这个思路我们可以编写一个中间件来处理： app.use(&#x27;/example&#x27;, function(req, res, next) &#123; // 对.css,.js等文件放行 if (req.url.lastIndexOf(&#x27;.&#x27;) &gt; req.url.lastIndexOf(&#x27;/&#x27;)) &#123; return next(); &#125; req.url = &#x27;/index.html&#x27;; next(); &#125;); app.use(&#x27;/example&#x27;, express.static(__dirname + &#x27;/dist/&#x27;)); 我这个中间件并不是很完善，只是为了提供一个思路。有一个现成封装好的中间件可以直接使用，connect-history-api-fallback 中间件，我们可以看下它的介绍： Single Page Applications (SPA) typically only utilise one index file that is accessible by web browsers: usually index.html. Navigation in the application is then commonly handled using JavaScript with the help of the HTML5 History API. This results in issues when the user hits the refresh button or is directly accessing a page other than the landing page, e.g. /help or /help/online as the web server bypasses the index file to locate the file at this location. As your application is a SPA, the web server will fail trying to retrieve the file and return a 404 - Not Found message to the user. This tiny middleware addresses some of the issues. Specifically, it will change the requested location to the index you specify (default being /index.html) whenever there is a request which fulfills the following criteria: The request is a GET or HEAD request which accepts text/html, is not a direct file request, i.e. the requested path does not contain a . (DOT) character and does not match a pattern provided in options.rewrites (see options below) 具体实现思路和我上述的差不多，做了更新细节的处理和封装，感兴趣的可自行查看源码。 具体使用安装npm install --save connect-history-api-fallback 使用app.use(&#x27;/example&#x27;, history()); app.use(&#x27;/example&#x27;, express.static(__dirname + &#x27;/dist/&#x27;)); Tips: 这里需要注意的是该中间件必须在static中间件前使用，否则会出现问题 如果在之后使用的话，请求会先走到static中间件中进行处理，static找不到对应的路径就会直接抛出404了，并不会走到该中间件处理。 更多用法请参考connect-history-api-fallback文档","categories":[{"name":"Engineer","slug":"Engineer","permalink":"http://lesliechan66.github.io/categories/Engineer/"}],"tags":[{"name":"Javasctipt Express Vue SPA","slug":"Javasctipt-Express-Vue-SPA","permalink":"http://lesliechan66.github.io/tags/Javasctipt-Express-Vue-SPA/"}]},{"title":"kodi+alist打造家庭级影院","slug":"kodi","date":"2023-05-16T14:58:33.000Z","updated":"2023-05-16T17:02:34.048Z","comments":true,"path":"kodi.html","link":"","permalink":"http://lesliechan66.github.io/kodi.html","excerpt":"","text":"Kodi 是一款功能强大的多媒体影音播放器 以更优雅的方式来管理你的影音资源 解码能力强 丰富强大的插件支持 炫酷的皮肤主题可以打造属于你自己家庭影院体验 多平台运行支持 本文主要介绍kodi使用，Alist配置请参考使用AList+rclone将你的阿里云盘挂载到本地中Alist部分 kodi安装 kodi官网 👉 点击下载 选择对应的平台下载安装即可 配置安装成功后，打开kodi，界面应该如下图所示，需进行一系列的配置以方便我们操作 皮肤设置打开Settings-&gt;Interface-&gt;Skin选择skin，然后选择GET MORE，下载你喜欢的皮肤，我使用的皮肤是**Embuary (Matrix) ** Tips: 每次切换皮肤时，需先将语言设置为英文，否则会出现乱码 语言设置打开Settings-&gt;Interface-&gt;Skin将fonts设置为Arial based，然后进入Settings-&gt;Interface-&gt;Regional将language设置为Chinese Simpled 添加alist源在添加源时选择浏览 然后添加网络位置，协议选择WebDAV(http)，服务器地址你本机的ip地址，远程路径填&#x2F;dav，然后输入alist的管理员账号及密码 然后将你存放电视剧和电影的文件分别添加到源。添加后系统会让你设置内容，暂时先不管。 刮削添加源后我们需要刮削影片和剧集的信息才能展示好看的海报墙。 因为众所周知的原因导致kodi官方提供的刮削器插件在国内并不能使用。我们可以使用第三方库的刮削器来解决该问题，点此下载第三方库，下载完成后，进入插件，选择从zip文件安装，选择刚刚下载的第三方库。然后我们再选择从库安装 选择timefly库，进入信息提供者分别下载剧集信息和电影信息的刮削器，推荐下载The Movie Database(免hosts)。 然后选择刚刚添加的源，长按或右键呼出菜单，选择设置内容，将信息提供者设置为刚才安装的刮削器插件。 Tips: 电影和剧集需按照一定规则的命名才能保证刮削的信息正确，具体命名规范可自行搜索 这里推荐一个阿里云盘批量改名的油猴插件阿里云盘-批量修改文件名-剧集刮削","categories":[{"name":"others","slug":"others","permalink":"http://lesliechan66.github.io/categories/others/"}],"tags":[{"name":"kodi","slug":"kodi","permalink":"http://lesliechan66.github.io/tags/kodi/"}]},{"title":"使用AList+rclone将你的阿里云盘挂载到本地","slug":"alist","date":"2023-05-16T07:53:18.000Z","updated":"2023-05-16T17:08:02.315Z","comments":true,"path":"alist.html","link":"","permalink":"http://lesliechan66.github.io/alist.html","excerpt":"","text":"使用AList+rclone将你的阿里云盘挂载到本地 本地环境： MacOS (Apple Chip M1) Docker 安装AList使用docker（推荐）输入下面的命令来运行alist 1docker run -d --restart=always -v /etc/alist:/opt/alist/data -p 5244:5244 -e PUID=0 -e PGID=0 -e UMASK=022 --name=&quot;alist&quot; xhofe/alist:latest 成功跑起来之后可以访问 http://127.0.0.1:5244进入到登陆界面，用户名和密码查看日志也可以输入以下命令来查看 1docker exec -it alist ./alist admin 登陆成功后在管理界面添加存储，驱动选择阿里云盘open。具体配置请参考阿里云盘open rclone安装打开终端输入如下命令安装 1sudo -v ; curl https://rclone.org/install.sh | sudo bash 具体可参阅rclone官网 配置在终端输入rclone config按回车，进入配置流程，具体流程如下： 选择配置项，新建远程对应的是n，输入n按回车即可 设置远程名称，挂载后该名称将作为磁盘名称 选择存储类型，webdav对应的序号为46 设置远程地址，输入Alist的webdav地址即可，alist的webdav地址为ip+port+&#x2F;dav，例如http://127.0.0.1:5244/dav 选择webdav服务商，这里我们选其他，输入5即可 设置webdav用户名，即Alist的管理员账号 设置webdav密码，即Alist管理员密码 后面一路按回车即可 macfuse安装1brew install --cask macfuse 安装后需进入系统设置-&gt;隐私与安全性关闭系统安全机制，才加载挂载所需的内核插件，关闭这个需要进入恢复模式设置，具体可参考更改启动磁盘上所使用的安全性级别 挂载以上步骤都完成后，就可以开始挂载了，新建一个文件夹，例如alist，然后输入如下命令进行挂载 1nohup rclone mount [remote]:/ [local] --cache-dir /tmp --allow-other --vfs-cache-mode writes --header &quot;Referer:https://www.aliyundrive.com/drive&quot; &amp; 将remote替换为你rclone配置的远程名称，local替换为本地挂载的路径 挂载成功后我们可以打开finder然后看到对应的文件夹变成fuse的图标就大功告成了🎉 如需取消挂载，可输入以下命令 1sudo umount [your folder]","categories":[{"name":"others","slug":"others","permalink":"http://lesliechan66.github.io/categories/others/"}],"tags":[{"name":"alist","slug":"alist","permalink":"http://lesliechan66.github.io/tags/alist/"}]}],"categories":[{"name":"Engineer","slug":"Engineer","permalink":"http://lesliechan66.github.io/categories/Engineer/"},{"name":"others","slug":"others","permalink":"http://lesliechan66.github.io/categories/others/"}],"tags":[{"name":"Javasctipt Express Vue SPA","slug":"Javasctipt-Express-Vue-SPA","permalink":"http://lesliechan66.github.io/tags/Javasctipt-Express-Vue-SPA/"},{"name":"kodi","slug":"kodi","permalink":"http://lesliechan66.github.io/tags/kodi/"},{"name":"alist","slug":"alist","permalink":"http://lesliechan66.github.io/tags/alist/"}]}